

## 1)__Correlations__ ----

# 1a) score vs participations ----
player_df$title_ordered <- factor(player_df$title, levels = c("GM", "IM", "FM", "CM", "NM", "WGM", "WIM", "WFM", "WCM", "WNM"))

player_df %>% 
  filter(N_participations >= 10,
         title_ordered %in% c("GM", "IM", "FM", "CM", "NM")) %>% 
  ggplot(aes(x = N_participations, y = avg_score, color = title_ordered)) +
  #ggplot(aes(x = N_participations, y = median_score, color = title_ordered)) +
  geom_point(alpha = 0.5) +
  theme_light() +
  #geom_smooth() # quite a big overlap for the lowest 2 titles
  geom_smooth(se = 0) 

# 1b) score vs rating ----
player_df %>% 
  filter(N_participations >= 10,
         title_ordered %in% c("GM", "IM", "FM", "CM", "NM"))
# 1403 players left

player_df %>% 
  filter(N_participations >= 10,
         title_ordered %in% c("GM", "IM", "FM", "CM", "NM")) %>% 
  ggplot(aes(x = Rating_best, y = avg_score)) +
  geom_point(alpha = 0.5) +
  theme_light() +
  geom_smooth(se = 0.95) 

# adding titles
player_df %>% 
  filter(N_participations >= 10,
         title_ordered %in% c("GM", "IM", "FM", "CM", "NM")) %>% 
  ggplot(aes(x = Rating_best, y = avg_score, color = title_ordered)) +
  geom_point(alpha = 0.5) +
  theme_light() +
  geom_smooth(alpha = 0.2) # quite a big overlap for the lowest 2 titles
  #geom_smooth(se = 0) 

# trend is similar, higher rating higher score, but the intercept is different
# GM suually a few points over NM, even at same rating

# linear models later to predict score based on different criteria

# 2D density instead of scatter-plot
player_df %>% 
  filter(N_participations >= 10,
         title_ordered %in% c("GM", "IM", "FM", "CM", "NM")) %>% 
  ggplot(aes(x = rating_avg, y = avg_score, color = title_ordered)) +
  geom_point(alpha = 0.3) +
  geom_density_2d(size = 0.5) +
  facet_wrap(~title_ordered, nrow = 2, dir = "h") +
  theme(legend.position = "none") +
  geom_smooth(alpha = 0.2)

player_df %>% filter(N_participations >= 10, title == "GM", rating_avg %in% 2900:3100)
player_df %>% filter(N_participations >= 10, title == "GM", rating_avg %in% 2900:3100) %>% 
  pull(avg_score) %>% sort() #%>% mean()

# worst scoring GMs (don't play that many games)
player_df %>% 
  filter(N_participations >= 10,
         title_ordered == "GM", 
         avg_score < 3) %>% 
  arrange(desc(avg_score)) %>% 
  select(name:best_Place, avg_games_played)

# score vs. title boxplot ----
player_df %>% 
  filter(N_participations >= 10,
         title_ordered %in% c("GM", "IM", "FM", "CM", "NM")) %>% 
  ggplot(aes(x = title_ordered, y = avg_score, color = title_ordered)) +
  geom_boxplot(aes(fill = title_ordered), alpha = 0.2, outlier.shape = NA) +
  geom_jitter(alpha = 0.3) +
  theme(legend.position = "none")
  
# rating vs. title histogram ----
player_df %>% 
  filter(N_participations >= 10,
         title_ordered %in% c("GM", "IM", "FM", "CM", "NM")) %>% 
  ggplot(aes(x = Rating_best, fill = title_ordered)) +
  geom_histogram(color = "white") + 
  facet_wrap(~title_ordered, nrow = 5)



# special player scatter rating vs score ----
# who are the top 2 dots in the corner? Magnus and Hikaru I guess (bottom left corner GM?)
# where is gotham chess?	GothamChess Levy Rozman
player_df %>% filter(username == "GothamChess") %>% select(N_participations, avg_score, Rating_best)
# make chart for only those 4 players and color them red...
library(ggrepel)
player_df %>% 
  filter(N_participations >= 10,
         title_ordered %in% c("GM", "IM", "FM", "CM", "NM")) %>% 
  ggplot(aes(x = Rating_best, y = avg_score, 
             color = title_ordered, fill = title_ordered)) +
  geom_point(alpha = 0.3) +
  geom_point(data = player_df %>% filter(username %in% c("MagnusCarlsen", "Hikaru", "GothamChess", "DanielNaroditsky")),
             mapping = aes(x = Rating_best, y = avg_score), color = "black") +
  geom_label_repel(data = player_df %>% filter(username %in% c("MagnusCarlsen", "Hikaru", "GothamChess", "DanielNaroditsky")),
                   aes(label = name), color = "black")



# worse GMs ----
player_df %>% filter(title == "GM",
                     N_participations >= 4) %>% 
  arrange((avg_score)) %>% 
  select(username, N_participations, avg_score, Rating_best, name, avg_games_played)


# best IMs and FMs ----
player_df %>% filter(title == "IM",
                     N_participations >= 4) %>% 
  arrange(desc(avg_score)) %>% 
  select(name, N_participations, avg_score, Rating_best, avg_games_played)

player_df %>% filter(title == "FM",
                     N_participations >= 4) %>% 
  arrange(desc(avg_score)) %>% 
  select(name, N_participations, avg_score, Rating_best, avg_games_played)

# FIDE title does not tell you too much about blitz games/ratings

## Focus on interesting correlation



## __Corrplot__ ----

library(GGally)

GGally::ggpairs(data = TT %>% filter(title_ordered %in% c("GM", "IM", "FM", "CM", "NM")),
                columns = c(8,20,31,32))

# adding species information and color
GGally::ggpairs(TT %>% filter(title_ordered %in% c("GM", "IM", "FM", "CM", "NM")), 
                columns = c(8,20,31,32), 
                ggplot2::aes(colour=title_ordered))



## __Linear Models__ ----
# lm) Score ----
# summary(lm(data = TT, formula = score ~ time)) # almost everything will be significant
# but with low R-squared (variance explained)

# t.test(x = TT$score[TT$time == "early"],
#        y = TT$score[TT$time == "late"]) # higher scores early

summary(lm(data = TT, formula = score ~ rating)) # already explains 24.5%
TT %>% ggplot(aes(x = rating, y = score)) +
  geom_point(alpha = 0.2) +
  geom_smooth(method = "lm")

summary(lm(data = TT, formula = score ~ title)) # not much more
summary(lm(data = TT, formula = score ~ rating + title)) # not much more

# predicting score (based on games played), which variable has the highest influence
TT %>% ggplot(aes(games_played, score)) + geom_jitter(alpha = 0.2) + # awesome chart
  geom_smooth() # solide linear trend
# test for # games played as x and score as y for different titles
TT %>% 
  filter(title_ordered %in% c("GM", "IM", "FM", "CM", "NM")) %>% 
  ggplot(aes(x = games_played, y = score, color = title_ordered)) +
  geom_jitter(alpha = 0.2, size = 0.5) +
  geom_smooth()


summary(lm(data = TT, formula = score ~ games_played)) # 67.8% variance explained (huge)
TT %>% ggplot(aes(x = games_played, y = score)) +
  geom_count(alpha = 0.5) +
  geom_smooth(method = "lm")


# does title correlate with games played?
player_df %>% 
  filter(title_ordered %in% c("GM", "IM", "FM", "CM", "NM")) %>% 
  ggplot(aes(x = title_ordered, y = avg_games_played, fill = title_ordered)) +
  geom_boxplot() 

# GM and NM seem to be responsible for the trend
# dummy coding for that?
TT %>% 
  filter(title_ordered %in% c("GM", "IM", "FM", "CM", "NM")) %>% 
  ggplot(aes(x = title_ordered, y = games_played, fill = title_ordered)) +
  geom_boxplot() 


summary(lm(data = TT, formula = score ~ rating + games_played))
#summary(lm(data = TT, formula = score ~ rating + games_played + top2))
#summary(lm(data = TT, formula = score ~ rating + games_played + number_of_wins_with_black_pieces))

# predict levy! ----
lm1 <- lm(data = TT, formula = score ~ rating + games_played)
levy_df <- TT %>% filter(username == "GothamChess") %>% select(rating, games_played, score)
levy_df$predict <- round(predict.lm(object = lm1, newdata = levy_df), 1)
levy_df$diff <- levy_df$score - levy_df$predict
View(levy_df)
levy_df %>% ggplot(aes(x = diff)) + geom_histogram(color = "black")
# looks like he is performing better than average (scoring higher than predicted more often)

# chart for interaction term (games played groupings)
TT %>% ggplot(aes(x = rating, y = score)) +
  geom_point(alpha = 0.2) +
  facet_wrap(~games_played) +
  geom_smooth()

summary(lm(data = TT, formula = score ~ rating + games_played))
summary(lm(data = TT, formula = score ~ rating * games_played))

summary(lm(data = TT %>% filter(games_played == 1), 
           formula = score ~ rating )) # slope, p-value, r-squared, DF
#7.85e-05, 0.0245, 0.00183, 2211
summary(lm(data = TT %>% filter(games_played == 2), 
           formula = score ~ rating )) # 8.152e-04, 2.2e-16, 0.08327, 2340
summary(lm(data = TT %>% filter(games_played == 3), 
           formula = score ~ rating )) # 1.389e-03, 0.1637, 2489 
summary(lm(data = TT %>% filter(games_played == 4), 
           formula = score ~ rating )) # 2.041e-03, 0.2855, 3330
summary(lm(data = TT %>% filter(games_played == 5), 
           formula = score ~ rating )) # 2.309e-03, 0.3069 , 2315 
summary(lm(data = TT %>% filter(games_played == 6), 
           formula = score ~ rating )) # 2.664e-03, 0.3482, 2502
summary(lm(data = TT %>% filter(games_played == 7), 
           formula = score ~ rating )) # 3.043e-03, 0.3815, 2607
summary(lm(data = TT %>% filter(games_played == 8), 
           formula = score ~ rating )) # 3.689e-03, 0.5405, 3071 
summary(lm(data = TT %>% filter(games_played == 9), 
           formula = score ~ rating )) # 4.115e-03, 0.5864, 2088
summary(lm(data = TT %>% filter(games_played == 10), 
           formula = score ~ rating )) # 4.627e-03, 0.6104, 3102 
summary(lm(data = TT %>% filter(games_played == 11), 
           formula = score ~ rating )) # 5.384e-03, 0.7191, 22579

             
# test for # games played as x and score as y for different titles
TT %>% 
  filter(title_ordered %in% c("GM", "IM", "FM", "CM", "NM")) %>% 
  ggplot(aes(x = games_played, y = score, color = title_ordered)) +
  geom_jitter(alpha = 0.2, size = 0.5) +
  geom_smooth()

#investigate the interaction term, yes powerful, more games means more points, but especially for GMs
# steeper slope, eventhough they are matched against other GMs in later rounds (often, but not exclusively)

summary(lm(data = TT %>% 
             filter(title_ordered %in% c("GM", "IM", "FM", "CM", "NM")), 
           formula = score ~ games_played + title_ordered)) # rating is better, but title is more explainable

# awesome, if you are a GM you make more points than average (0.56) per game,
# bing lower ranked gives you a real penalty overall (-1.6 for FMs)
# it explains 77.9% of the variance, a bit more when allowing interaction
# shows 3 dimensions (1 categorical title) in a 2d chart. with games/score/rating you need 3D plot, and then maybe color the titles in

# similar to the geom_smooth charts but less condensed
plotly_TT <- TT %>% filter(title_ordered %in% c("GM", "IM", "FM", "CM", "NM"))

plot_ly(x=plotly_TT$games_played, y=plotly_TT$rating, z=plotly_TT$score, type="scatter3d", mode="markers", color=plotly_TT$title_ordered)


plotly_player <- player_df %>% filter(title_ordered %in% c("GM", "IM", "FM", "CM", "NM")) %>% 
  filter(N_participations >=5) # to smooth things out a bit mroe

plot_ly(x=plotly_player$avg_games_played, y=plotly_player$rating_avg, z=plotly_player$avg_score, type="scatter3d", mode="markers", color=plotly_player$title_ordered)

# ! pinpoint to the top GMs, who is 8-2812-8? Standing out from the rest, who is Hikaru and Magnus?
plotly_player %>% filter(avg_games_played == 5.375) %>% 
  select(username, name, title, fed, N_participations, rating_avg)

# David Howell, beloved commentator GM often in the background of Magnus Carlsen
# scoring above averag? predict

# but rating is still more important than title (because classical chess based and not blitz rating)




# if everyone would play all games then every game would provide on average 0.5 points
# but good players play more games, bad players quite early hence, playing more gives you more points
# based on the intercept every player starts on average with negative points and has to fight upwards


# 20) even though more players are playing early, maybe the winning chance (average score is smaller?) ----
TT %>% filter(number == 1) %>% 
  group_by(time) %>% 
  ggplot(aes(x = time, y = score)) +
  geom_boxplot() +
  geom_jitter(alpha = 0.5)

t.test(x = TT %>% filter(number == 1, time == "early") %>% pull(score),
       y = TT %>% filter(number == 1, time == "late") %>% pull(score))

t.test(x = TT %>% filter(number %in% 1:3, time == "early") %>% pull(score),
       y = TT %>% filter(number %in% 1:3, time == "late") %>% pull(score))

# early round has slightly higher scores (better players?) in the top 3


# 21) prop.test winning chance ----
# stats test for proportions, not significant difference
player_df %>% arrange(desc(winning_chance)) %>% 
  select(name, N_participations, N_1st, winning_chance, Rating_best)

# Lê Quang Liêm ist ein vietnamesischer Großmeister, der zur erweiterten Weltspitze im Schachsport zählt und die Weltmeisterschaft im Blitzschach im Jahr 2013 gewann. 
# Liem Le

# Hikaru vs. Magnus
prop.test(x = c(18, 9), n = c(74, 39)) # p-value 1

# Liem Le vs. Shakhriyar Mamedyarov
prop.test(x = c(3, 1), n = c(10, 8))

# Hikaru vs. Nihal Sarin
prop.test(x = c(18, 5), n = c(74, 45)) # p-value 0.1258

# Hikaru vs. Dmitry Andreikin
prop.test(x = c(18, 6), n = c(74, 84)) # p-value 0.005429


# chart (add sample size to name again) (and winning number like 7/35 for Magnus)
player_df %>% arrange(desc(winning_chance)) %>% 
  top_n(n = 30, wt = winning_chance) %>% 
  mutate(name = fct_reorder(name, winning_chance)) %>% 
  ggplot(aes(x = name, y = winning_chance, fill = winning_chance)) +
  geom_col() +
  coord_flip()
# worth filter out tournaments where the player not play a single game!






# bottom 11 worst rated grandmasters
player_df %>% 
  filter(N_participations >= 5,
         title_ordered %in% c("GM", "IM", "FM", "CM", "NM")) %>% 
  ggplot(aes(x = Rating_best, y = avg_score, color = title_ordered)) +
  geom_point(alpha = 0.3) +
  geom_point(data = player_df %>% filter(avg_score < 2.5,
                                         N_participations >= 5,
                                         title == "GM"),
             mapping = aes(x = Rating_best, y = avg_score), color = "black")

player_df %>% filter(avg_score < 2.5,
                     N_participations >= 5,
                     title == "GM")

# 11 best rated IMs
player_df %>% 
  filter(N_participations >= 5,
         title_ordered %in% c("GM", "IM", "FM", "CM", "NM")) %>% 
  ggplot(aes(x = Rating_best, y = avg_score, color = title_ordered)) +
  geom_point(alpha = 0.3) +
  geom_point(data = player_df %>% filter(avg_score > 7,
                                         N_participations >= 5,
                                         title == "IM"),
             mapping = aes(x = Rating_best, y = avg_score), 
             shape = 21, fill = "yellow", color = "black", size = 2.5)

player_df %>% filter(avg_score > 7,
                     N_participations >= 5,
                     title == "IM") %>% 
  arrange(desc(avg_score))



